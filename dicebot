#!/bin/bash

# binaries
CLI="${HOME}/bin/komodo-cli -ac_name=KMDICE"
JQ=$(which jq || (echo "JQ not found!"; exit 1))
BC=$(which bc || (echo "BC not found!"; exit 1))
FIGLET=$(which figlet || (echo "FIGLET not found!"; exit 1))
CLEAR=$(which clear || (echo "CLEAR not found!"; exit 1))

# min and max bet size, odds
BET_MIN=1
BET_MAX=64
BET_ODDS=2

# bet size adjustment factors
# reset to min on win while positive net
BET_ADJUST_UP=2
BET_ADJUST_DOWN=3
BET_FLOOR_POSITIVE=1

# if won more than this, exit
NET_EXIT=100

# how little randtxs to we consider too little
RANDTXS_LOW=500

# name and id of dice game
DICEID="5be49570c56d036abb08b6d084da93a8a86f58fc48db4a1086be95540d752d6f"
DICENAME="KMDICE"

# counters
WINCOUNT=0
LOSSCOUNT=0
WON=0
LOST=0
NET=0
ENTROPYTXS=$(${CLI} diceinfo ${DICEID}|${JQ} -r .entropytxs)
GAMECOUNT=1 # start at 1!
BET_CURRENT=${BET_MIN}


# functions
printdate(){
	echo -n "[$(date)]"
}

place_bet(){
	if [ -z "${4}" ]; then	
		echo "$(printdate) place_bet ERROR: not enough parameters given"
		exit 1
	else
		P_HEX=$(${CLI} dicebet "${DICENAME}" "${DICEID}" ${BET_CURRENT} ${BET_ODDS})
		P_HEX_RESULT=$(echo ${P_HEX}|${JQ} -r .result)
		P_HEX_RAW=$(echo ${P_HEX}|${JQ} -r .hex)

		if [ "${P_HEX_RESULT}" != "success" ]; then
			echo "$(printdate) place_bet ERROR: tx preparation failed"
			exit 1
		else
			P_TX="$(${CLI} sendrawtransaction ${P_HEX_RAW})"
			P_RESULT=$(${CLI} dicestatus ${DICENAME} ${DICEID} ${P_TX})
			
			if [ "$(echo ${P_RESULT}|${JQ} -r .result)" == "success" ]; then

				P_STATUS=$(${CLI} dicestatus ${DICENAME} ${DICEID} ${P_TX})
				while [ "$(echo ${P_STATUS}|${JQ} -r .status)" == "bet still pending" ]; do
					sleep .25
					P_STATUS="$(${CLI} dicestatus ${DICENAME} ${DICEID} ${P_TX})"
				done
				echo
				echo "${P_STATUS}"
			else
				echo "$(printdate) place_bet ERROR: unknown error"
				exit 1
			fi
		fi
	fi
}

# main loop
${CLEAR}
${FIGLET} DICEBOT
echo
if [ -z "$(${CLI} getinfo | ${JQ} -r .blocks)" ]; then
	echo "$(printdate) ERROR: KMDICE not running, exiting!"
	exit 1
elif [ -z "${ENTROPYTXS}" ] || [ "${ENTROPYTXS}" -lt "500" ]; then
	echo "$(printdate) ERROR: low number of entropytxs: ${ENTROPYTXS}, exiting!"
	exit 1
else
	${CLI} getbalance > ~/tmp/start.$(date +%s)
	echo "$(printdate) INIT: KMDICE running, start betting at ${BET_CURRENT} with Odds: 1:${BET_ODDS}!"
	echo -n "$(printdate) INIT: Min: ${BET_MIN}, Max: ${BET_MAX}, Adjustment Factor Raise/Lower: ${BET_ADJUST_UP}/${BET_ADJUST_DOWN}"
	if [ "${BET_FLOOR_POSITIVE}" -eq "1" ]; then
		echo " (floor on positive)"
	else
		echo
	fi

	#
	# MAIN LOOP
	#
	while true; do

		# print status info	
		echo "$(printdate) INFO: balance: $(${CLI} getbalance)"
		echo "$(printdate) INFO: floor: ${BET_MIN}, ceil: ${BET_MAX}"
		echo "$(printdate) INFO: wins: ${WINCOUNT}, losses: ${LOSSCOUNT}, $(echo ${WINCOUNT}+${LOSSCOUNT}|${BC}) total bets"
		echo "$(printdate) INFO: won: ${WON}, lost: ${LOST}, net ${NET}"

		# stop dicebot if > net treshold
		if [ "${NET}" -ge "${NET_EXIT}" ]; then
			echo "$(printdate) INFO: accumulated net of ${NET}. exiting!"
			${FIGLET} ${NET}
			echo
			exit 1
		fi

		#
		# PLACE BET
		#
		echo "$(printdate) INFO: placing bet #${GAMECOUNT}: ${BET_CURRENT}"
		BET_RESULT=$(place_bet ${DICENAME} ${DICEID} ${BET_CURRENT} ${BET_ODDS})


		if [ "$(echo ${BET_RESULT}|${JQ} -r .status)" == "win" ]; then
			# 
			# BET WON!
			# 

			# update counters
			WON=$(echo ${WON}+$(echo ${BET_RESULT}|${JQ} -r .won)-${BET_CURRENT}|${BC})
			NET=$(echo ${WON}-${LOST}|${BC})
			WINCOUNT=$(echo ${WINCOUNT}+1|${BC})

			# print banner
			${FIGLET} "WON $(echo $(echo ${BET_RESULT}|${JQ} -r .won)-${BET_CURRENT}|${BC}) :  ${NET}"
	
			# calculate size of next bet	
			if [ "${NET}" -gt 0 ]; then
				BET_CURRENT=1
			else
				BET_CURRENT=$(echo ${BET_CURRENT}/${BET_ADJUST_DOWN}|${BC})
				if [ "${BET_CURRENT}" -lt "${BET_MIN}" ]; then
					BET_CURRENT=${BET_MIN}
				fi
			fi

			# print info about next bet
			if [ "${BET_CURRENT}" -le "${BET_MIN}" ]; then
				echo "$(printdate) WIN, floor, next ${BET_CURRENT}"
			else
				echo "$(printdate)  WIN, lower, next ${BET_CURRENT}"
			fi

		elif [ "$(echo ${BET_RESULT}|${JQ} -r .status)" == "loss" ]; then
			# 
			# BET LOST!
			#

			# update counters
			LOST=$(echo ${LOST}+${BET_CURRENT}|${BC})
			NET=$(echo ${WON}-${LOST}|${BC})
			LOSSCOUNT=$(echo ${LOSSCOUNT}+1|${BC})

			# print banner
			${FIGLET} "LOST ${BET_CURRENT} :  ${NET}"

			# calculate size of next bet
			BET_CURRENT=$(echo ${BET_CURRENT}*${BET_ADJUST_UP}|${BC})
			if [ "${BET_CURRENT}" -gt "${BET_MAX}" ]; then	
				BET_CURRENT=${BET_MAX}
			fi			

			# print info about next bet
			if [ "${BET_CURRENT}" -ge "${BET_MAX}" ]; then
				echo "$(printdate) LOSS, ceil, next ${BET_CURRENT}"
			else
				echo "$(printdate) LOSS, raise, next: ${BET_CURRENT}"
			fi

		else
			#
			# ERROR
			#
			echo "$(printdate)  ERR, no bet, next ${BET_CURRENT}"
		fi

		# update bet counter
		GAMECOUNT=$(echo ${WINCOUNT}+${LOSSCOUNT}|${BC})
		sleep 3
		${CLEAR}
	done
fi

# EOF
